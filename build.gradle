plugins {
    id 'java'
    id 'jacoco'
    id "org.springframework.boot" version "2.0.2.RELEASE"
    id "io.spring.dependency-management" version "1.0.5.RELEASE"
    id 'maven-publish'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
        mavenLocal()
    }
}

allprojects {
    group 'com.aaa'
    version '0.0.27-SNAPSHOT'
}

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    /* SpringBoot */
    compile("org.springframework.boot:spring-boot-starter-web")

    /* Security */
    compile("org.springframework.boot:spring-boot-starter-security")
    compile 'io.jsonwebtoken:jjwt:0.7.0'

    /* Hibernate */
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'

    /* Email */
    compile("org.springframework.boot:spring-boot-starter-mail:1.5.7.RELEASE")
    compile("org.springframework.boot:spring-boot-starter-freemarker")

    /* Redis */
    compile("org.springframework.data:spring-data-redis:2.0.9.RELEASE")
    compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
    compile("org.apache.commons:commons-pool2")
    compile("org.apache.commons:commons-lang3")

    /* Util */
    compile group: 'com.google.guava', name: 'guava', version: '25.0-jre'
    compile("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml")
    compile("com.fasterxml.jackson.core:jackson-databind")

    /* Test */
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'org.springframework.security', name: 'spring-security-test'

}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/java')
        }
        resources.srcDir file('src/integration/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

jar {
    enabled=true
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

tasks.withType(Test) {
    reports.html.setDestination(file("${reporting.baseDir}/${name}"))
}
